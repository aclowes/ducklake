# name: test/sql/add_files/add_files_nested.test
# description: test ducklake adding files with nested types directly
# group: [add_files]

require ducklake

require parquet

test-env DUCKLAKE_CONNECTION __TEST_DIR__/{UUID}.db


statement ok
ATTACH 'ducklake:${DUCKLAKE_CONNECTION}' AS ducklake (DATA_PATH '__TEST_DIR__/ducklake_add_files_nested');

statement ok
CREATE TABLE ducklake.test(col1 STRUCT(i INTEGER, j INTEGER), col2 STRUCT(col1 INTEGER, col2 INTEGER));

statement ok
BEGIN

statement ok
COPY (SELECT {'i': 1, 'j': 2} col1, {'col1': 100, 'col2': 200} col2) TO '__TEST_DIR__/nested1.parquet';

statement ok
CALL ducklake_add_data_files('ducklake', 'test', '__TEST_DIR__/nested1.parquet')

query II
FROM ducklake.test
----
{'i': 1, 'j': 2}	{'col1': 100, 'col2': 200}

statement ok
COMMIT

query II
FROM ducklake.test
----
{'i': 1, 'j': 2}	{'col1': 100, 'col2': 200}

# columns can be arbitrarily re-ordered, as can struct fields
statement ok
COPY (SELECT  {'col2': 400, 'col1': 200} col2, {'j': 20, 'i': 10} col1) TO '__TEST_DIR__/nested2.parquet';

statement ok
CALL ducklake_add_data_files('ducklake', 'test', '__TEST_DIR__/nested2.parquet')

query II
FROM ducklake.test
----
{'i': 1, 'j': 2}	{'col1': 100, 'col2': 200}
{'i': 10, 'j': 20}	{'col1': 200, 'col2': 400}
